summary(lm1)
lm2 <-lm(HouseValueE ~ segment + IncomeE + AgeE + HouseholdSizeE + IncomeGrowth,data = spatial_data_no_empty_geo_2)
summary(lm2)
lm3 <-lm(HouseValueE ~ segment + IncomeE + HouseholdSizeE + IncomeGrowth,data = spatial_data_no_empty_geo_2)
summary(lm3)
BIC(lm1)
BIC(lm2)
BIC(lm3)
spatial_data_no_empty_geo$lm_resid <- resid(lm3)
# Fit OLS Model
spatial_data_no_empty_geo <- spatial_data_no_empty_geo %>%
drop_na(HouseValueE, segment, IncomeE, AgeE, HouseholdSizeE, IncomeGrowth)
# Fit OLS Model
spatial_data_no_empty_geo <- spatial_data_no_empty_geo %>%
drop_na(HouseValueE, segment, IncomeE, AgeE, HouseholdSizeE, IncomeGrowth)
lm1 <-lm(HouseValueE ~  segment + IncomeE + AgeE + HouseholdSizeE,data = spatial_data_no_empty_geo)
summary(lm1)
lm2 <-lm(HouseValueE ~ segment + IncomeE + AgeE + HouseholdSizeE + IncomeGrowth,data = spatial_data_no_empty_geo)
summary(lm2)
lm3 <-lm(HouseValueE ~ segment + IncomeE + HouseholdSizeE + IncomeGrowth,data = spatial_data_no_empty_geo)
summary(lm3)
BIC(lm1)
BIC(lm2)
BIC(lm3)
spatial_data_no_empty_geo$lm_resid <- resid(lm3)
spatial_data_no_empty_geo %>%
st_as_sf() %>%
ggplot() +
geom_sf(aes(fill = lm_resid), size = 0) +
scale_fill_gradient2(mid = "white", high = "red", low = "blue") +
theme_classic()
Wb <- nb2listw(KNN, style = "B")
length(Wb)
spdep::moran.test(spatial_data_no_empty_geo$lm_resid, Wb, alternative = "two.sided", randomisation = TRUE)
Wb <- nb2listw(KNN, style = "B")
# length(Wb)
spdep::moran.test(spatial_data_no_empty_geo$lm_resid, Wb, alternative = "two.sided", randomisation = TRUE)
spatial_data_no_empty_geo$lm_resid
Wb
# Remove empty geo data
spatial_data_no_empty_geo <- spatial_data %>%
filter(!st_is_empty(.)) %>%
drop_na(HouseValueE, segment, IncomeE, AgeE, HouseholdSizeE, IncomeGrowth)
## Build the KNN Structure
bay_area_centroids <- st_centroid(st_geometry(spatial_data_no_empty_geo), of_largest_polygon = TRUE)
# Remove empty geo data
spatial_data_no_empty_geo <- spatial_data %>%
drop_na(HouseValueE, segment, IncomeE, AgeE, HouseholdSizeE, IncomeGrowth) %>%
filter(!st_is_empty(.))
# Remove empty geo data
spatial_data_no_empty_geo <- spatial_data %>%
filter(!st_is_empty(.))
spatial_data_no_empty_geo
bay_area_centroids <- st_centroid(st_geometry(spatial_data_no_empty_geo), of_largest_polygon = TRUE)
spatial_data_no_empty_geo <- spatial_data_no_empty_geo %>%
drop_na(HouseValueE, segment, IncomeE, AgeE, HouseholdSizeE, IncomeGrowth)
spatial_data_no_empty_geo %>% View()
lm3 <-lm(HouseValueE ~ segment + IncomeE + HouseholdSizeE + IncomeGrowth, data = spatial_data_no_empty_geo)
summary(lm3)
spatial_data_no_empty_geo$lm_resid <- resid(lm3)
bay_area_centroids <- st_centroid(st_geometry(spatial_data_no_empty_geo), of_largest_polygon = TRUE)
spatial_data_no_empty_geo <- spatial_data_no_empty_geo %>%
drop_na(HouseValueE, segment, IncomeE, AgeE, HouseholdSizeE, IncomeGrowth) %>%
st_as_sf()
bay_area_centroids <- st_centroid(st_geometry(spatial_data_no_empty_geo), of_largest_polygon = TRUE)
KNN <- knn2nb(knearneigh(bay_area_centroids, k = 4))
nb_KNN_net <- nb2lines(nb = KNN, coords = bay_area_centroids, as_sf = TRUE)
Wb <- nb2listw(KNN, style = "B")
# length(Wb)
spdep::moran.test(spatial_data_no_empty_geo$lm_resid, Wb, alternative = "two.sided", randomisation = TRUE)
Wb <- nb2listw(KNN, style = "B")
# length(Wb)
spdep::moran.test(spatial_data_no_empty_geo$lm_resid, Wb, alternative = "two.sided", randomisation = TRUE)
knitr::opts_chunk$set(echo = FALSE, error = TRUE, warning = FALSE, message = FALSE)
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
library(ggplot2)
library(sf)
library(spdep)
library(spatialreg)
library(ggthemes)
experiment<- read.csv('Data.csv')
data<-as.data.frame(experiment)
data_1 <- data %>%
filter(SL<31) %>%
select(-X,-X.1)
##Given the low number of first years we could create two variables, one that it lower and upper classmen
data_school_year<-data_1 %>%
mutate(school_status = ifelse(test = School_Year == 1|School_Year==2, yes = "Underclassmen",no = "Upperclassmen"))
##Given the low number of subjects in certain majors I grouped them into Stem and Social Science
data_major_category<-data_school_year%>%
mutate(Major_category = ifelse(Major=="Biology"|Major=="Computer Science"|Major=="Geology"|Major=="Neuroscience"|Major=="Statistics","STEM","Social Science")) %>%
mutate(accuracy_rate = Correct/12, share_questions_responded = (Passage.1+Passage.2)/12)
data_final <- data_major_category %>%
mutate(Gender = as.factor(Gender),
English_Native = as.factor(English_Native),
International = as.factor(International),
Incentive_Structure = as.factor(Incentive_Structure),
Workload = as.factor(Workload),
school_status = as.factor(school_status),
Major_category = as.factor(Major_category))
data_correlation <- data_major_category %>%
mutate(Gender = ifelse(Gender== "Female" ,1,0),
English_Native = ifelse(English_Native == "Yes",1, 0),
International = ifelse(International == "Yes",1,0),
Incentive_Structure = ifelse(Incentive_Structure == "Positive",1,0),
Workload = ifelse(Workload=="Large",1,0),
school_status = ifelse(school_status == "Upperclassmen",1,0),
Major_category = ifelse(Major_category == "STEM",1,0))
data_final %>%
filter(Incentive_Structure == "Positive") %>%
count(Gender =="Female")
spatial_data_no_empty_geo %>%
ggplot() +
geom_sf(aes(fill = lm_resid), size = 0) +
scale_fill_gradient2(mid = "white", high = "red", low = "blue") +
theme_classic()
bay_area_centroids <- st_centroid(st_geometry(spatial_data_no_empty_geo), of_largest_polygon = TRUE)
KNN <- knn2nb(knearneigh(bay_area_centroids, k = 4))
nb_KNN_net <- nb2lines(nb = KNN, coords = bay_area_centroids, as_sf = TRUE)
# length(Wb)
spdep::moran.test(spatial_data_no_empty_geo$lm_resid, Wb, alternative = "two.sided", randomisation = TRUE)
KNN <- knn2nb(knearneigh(bay_area_centroids, k = 3))
nb_KNN_net <- nb2lines(nb = KNN, coords = bay_area_centroids, as_sf = TRUE)
spatial_data_no_empty_geo%>%
ggplot() +
geom_sf(fill = 'white') +
geom_sf(data = nb_KNN_net, size = .05, color = 'blue')+
theme_classic()
KNN <- knn2nb(knearneigh(bay_area_centroids, k = 3))
nb_KNN_net <- nb2lines(nb = KNN, coords = bay_area_centroids, as_sf = TRUE)
Wb <- nb2listw(KNN, style = "B")
# length(Wb)
spdep::moran.test(spatial_data_no_empty_geo$lm_resid, Wb, alternative = "two.sided", randomisation = TRUE)
KNN <- knn2nb(knearneigh(bay_area_centroids, k = 2))
nb_KNN_net <- nb2lines(nb = KNN, coords = bay_area_centroids, as_sf = TRUE)
Wb <- nb2listw(KNN, style = "B")
# length(Wb)
spdep::moran.test(spatial_data_no_empty_geo$lm_resid, Wb, alternative = "two.sided", randomisation = TRUE)
spatial_data_no_empty_geo %>%
ggplot(aes(x = segment, y = NumHouseE))+
geom_boxplot()
spatial_data_no_empty_geo %>%
ggplot(aes(x = segment, y = PopGrowth))+
geom_boxplot()
spatial_data_no_empty_geo %>%
ggplot(aes(x = segment, y = NumPeoplePerHouse))+
geom_boxplot()
spatial_data_no_empty_geo %>%
ggplot(aes(x = segment, y = IncomeGrowth))+
geom_boxplot()
spatial_data_no_empty_geo%>%
mutate(segment = as.factor(segment),
PopGrowth = as.numeric(PopGrowth),
IncomeE = as.numeric(IncomeE)) %>%
select(PopGrowth, IncomeE, PopE,AgeE,HouseValueE,HouseholdSizeE,NumHouseE,PopGrowth,IncomeGrowth,NumPeoplePerHouse) %>%
st_drop_geometry() %>%
cor(.,use='complete.obs')
lm3 <-lm(HouseValueE ~ segment + IncomeE + HouseholdSizeE, data = spatial_data_no_empty_geo)
summary(lm3)
lm3 <-lm(HouseValueE ~ segment + IncomeE + HouseholdSizeE, data = spatial_data_no_empty_geo)
summary(lm3)
BIC(lm3)
BIC(lm2)
BIC(lm3)
BIC(lm2)
BIC(lm3)
spatial_data_no_empty_geo$lm_resid <- resid(lm3)
spatial_data_no_empty_geo %>%
ggplot() +
geom_sf(aes(fill = lm_resid), size = 0) +
scale_fill_gradient2(mid = "white", high = "red", low = "blue") +
theme_classic()
bay_area_centroids <- st_centroid(st_geometry(spatial_data_no_empty_geo), of_largest_polygon = TRUE)
KNN <- knn2nb(knearneigh(bay_area_centroids, k = 2))
nb_KNN_net <- nb2lines(nb = KNN, coords = bay_area_centroids, as_sf = TRUE)
Wb <- nb2listw(KNN, style = "B")
# length(Wb)
spdep::moran.test(spatial_data_no_empty_geo$lm_resid, Wb, alternative = "two.sided", randomisation = TRUE)
library(dplyr)
library(lubridate)
library(stringr)
library(ggplot2)
library(sf) #install.packages('sf')
library(spdep) #install.packages('spdep')
library(patchwork)
library(viridis)
library(tidycensus)
library(tidygeocoder)
library(dplyr)
library(googlesheets4)
library(readr)
library(tidyr)
library(gganimate)
library(gifski)
library(transformr)
# Load company data
sf_companies_long <- read_csv("sf_companies.csv")
# Load bay area data from 2009 to 2019
load('CapstoneDataThuFranco.RData')
# Convert sf_companies dataset from wide to long form
sf_companies_long <- sf_companies_long %>%
filter(year < 2020) # keep data from 2009 to 2019
sf_companies_with_coordinates <- sf_companies_long %>%
geocode(Address)
## Use coordinates to match geographic shape and check for coordinate system to match Bay Area's
sf_companies_reshape <- st_as_sf(sf_companies_with_coordinates, coords = c("long", "lat"))
st_crs(sf_companies_reshape) = st_crs(bay_area_data_2009_2019_acs5)
# ## Calculating growth for companies
sf_companies_growth <- sf_companies_reshape %>%
group_by(Name, Address) %>%
mutate(PreviousYearEBITDA = lag(Yearly_EBITDA_million, n = 1, default = NA)) %>%
ungroup()
tract_dataset <- bay_area_data_2009_2019_acs5 %>% filter(year == 2019) %>% select(GEOID, geometry)
## For year 2019 we have 2000 meters radius that we will look for intersections with the geometry variable of the tract level data. We are creating a variable that counts the number of tech companies and we store it in a matrix.
tract_dataset$NumTechCompanies <- st_intersects(tract_dataset, st_buffer(sf_companies_growth %>%
filter(year == 2019), dist=2000)) %>%
lengths()
## Find average and total sum of financial info of close by companies by year and adds it to the data set with all geometries but not census data or company name.
tract_data_with_company_name <- st_join(tract_dataset, st_buffer(sf_companies_growth, dist=2000))
tract_dataset_with_company_info <- tract_data_with_company_name %>%
group_by(GEOID, year) %>%
summarize(aggregate_EBITDA = sum(Yearly_EBITDA_million, na.rm=TRUE),
aggregate_past_EBITDA = sum(PreviousYearEBITDA, na.rm=TRUE),
EBITDA_growth = ((aggregate_EBITDA-aggregate_past_EBITDA)/aggregate_past_EBITDA),
NumTechCompanies = max(NumTechCompanies)) %>%
ungroup() %>%
filter(!is.na(year))
## This line of code is changing the value for meanEPS when it has no input (from NaN to NA), weird, it gives 2009 EBITDA lagged values
tract_dataset_with_company_info$EBITDA_growth[is.nan(tract_dataset_with_company_info$EBITDA_growth)] = NA
tract_dataset_with_company_info$EBITDA_growth[is.infinite(tract_dataset_with_company_info$EBITDA_growth)] = NA
tract_dataset_with_company_info$EBITDA_growth[is.na(tract_dataset_with_company_info$EBITDA_growth)] = 0
tract_dataset_with_company_info$year = as.numeric(tract_dataset_with_company_info$year)
# Drop geometry in tract data with company info to merge with bay area data
#tract_dataset_with_company_info_drop_geo <- st_drop_geometry(tract_dataset_with_company_info)
##For this data set we had year = NA values
tract_dataset_with_company_info <- tract_dataset_with_company_info  %>%
mutate(segment = case_when(
EBITDA_growth >= 0.5 ~ "High Growth",
EBITDA_growth >= 0.2 & EBITDA_growth < 0.5 ~ "Medium Growth",
EBITDA_growth > 0 & EBITDA_growth < 0.2 ~ "Low Growth",
EBITDA_growth <= 0 ~ "Low Growth",
TRUE ~ as.character(EBITDA_growth)
))
county_growth_assignment <- tract_dataset_with_company_info %>%
select(GEOID, segment,year) %>%
distinct() %>%
arrange(GEOID) %>%
st_drop_geometry()
# Create population change column
bay_area_data_2009_2019_acs5 <- bay_area_data_2009_2019_acs5 %>%
group_by(GEOID, NAME) %>%
mutate(PreviousYearPop = lag(PopE, n = 1, default = NA)) %>%
ungroup() %>%
arrange(GEOID, year)
bay_area_data_2009_2019_acs5 <- bay_area_data_2009_2019_acs5 %>%
mutate(PopGrowth = (PopE - PreviousYearPop)/PreviousYearPop)
# Create income change column
bay_area_data_2009_2019_acs5 <- bay_area_data_2009_2019_acs5 %>%
group_by(GEOID, NAME) %>%
mutate(PreviousYearIncome = lag(IncomeE, n = 1, default = NA)) %>%
ungroup() %>%
arrange(GEOID, year)
bay_area_data_2009_2019_acs5 <- bay_area_data_2009_2019_acs5 %>%
mutate(IncomeGrowth = (IncomeE - PreviousYearIncome)/PreviousYearIncome)
# Create column # of people per house
bay_area_data_2009_2019_acs5 <- bay_area_data_2009_2019_acs5 %>%
mutate(NumPeoplePerHouse = PopE/NumHouseE)
longitudinal_data <- left_join(bay_area_data_2009_2019_acs5, county_growth_assignment, by = c("GEOID","year"))
longitudinal_data$segment[is.na(longitudinal_data$segment)] = "Control"
spatial_data <- longitudinal_data %>%
filter(year == 2018)
spatial_data_no_empty_geo <- spatial_data %>%
filter(!st_is_empty(.))
spatial_data_no_empty_geo%>%
ggplot() +
geom_sf(fill = 'white') +
geom_sf(data = nb_KNN_net, size = .05, color = 'blue')+
theme_classic()
spatial_data_no_empty_geo%>%
ggplot() +
geom_sf(fill = 'white') +
geom_sf(data = nb_KNN_net, size = .05, color = 'blue')+
theme_classic()
bay_area_centroids <- st_centroid(st_geometry(spatial_data_no_empty_geo), of_largest_polygon = TRUE)
KNN <- knn2nb(knearneigh(bay_area_centroids, k = 2))
nb_KNN_net <- nb2lines(nb = KNN, coords = bay_area_centroids, as_sf = TRUE)
Wb <- nb2listw(KNN, style = "B")
# length(Wb)
spdep::moran.test(spatial_data_no_empty_geo$lm_resid, Wb, alternative = "two.sided", randomisation = TRUE)
spatial_data_no_empty_geo%>%
ggplot() +
geom_sf(fill = 'white') +
geom_sf(data = nb_KNN_net, size = .05, color = 'blue')+
theme_classic()
Wb <- nb2listw(KNN, style = "B")
# length(Wb)
spdep::moran.test(spatial_data_no_empty_geo$lm_resid, Wb, alternative = "two.sided", randomisation = TRUE)
# Remove empty geo data
spatial_data_no_empty_geo <- spatial_data %>%
filter(!st_is_empty(.))
#Analyzing correlation with variable of interest
spatial_data_no_empty_geo %>%
ggplot(aes(x = segment, y = NumHouseE))+
geom_boxplot()
spatial_data_no_empty_geo %>%
ggplot(aes(x = segment, y = PopGrowth))+
geom_boxplot()
spatial_data_no_empty_geo %>%
ggplot(aes(x = segment, y = IncomeGrowth))+
geom_boxplot()
spatial_data_no_empty_geo %>%
ggplot(aes(x = segment, y = NumPeoplePerHouse))+
geom_boxplot()
spatial_data_no_empty_geo%>%
mutate(segment = as.factor(segment),
PopGrowth = as.numeric(PopGrowth),
IncomeE = as.numeric(IncomeE)) %>%
select(PopGrowth, IncomeE, PopE,AgeE,HouseValueE,HouseholdSizeE,NumHouseE,PopGrowth,IncomeGrowth,NumPeoplePerHouse) %>%
st_drop_geometry() %>%
cor(.,use='complete.obs')
# Fit OLS Model
spatial_data_no_empty_geo <- spatial_data_no_empty_geo %>%
drop_na(HouseValueE, segment, IncomeE, AgeE, HouseholdSizeE, IncomeGrowth) %>%
st_as_sf()
lm1 <-lm(HouseValueE ~  segment + IncomeE + AgeE + HouseholdSizeE, data = spatial_data_no_empty_geo)
summary(lm1)
lm2 <-lm(HouseValueE ~ segment + IncomeE + AgeE + HouseholdSizeE + IncomeGrowth, data = spatial_data_no_empty_geo)
summary(lm2)
lm3 <-lm(HouseValueE ~ segment + IncomeE + HouseholdSizeE, data = spatial_data_no_empty_geo)
summary(lm3)
BIC(lm1)
BIC(lm2)
BIC(lm3)
spatial_data_no_empty_geo$lm_resid <- resid(lm3)
spatial_data_no_empty_geo %>%
ggplot() +
geom_sf(aes(fill = lm_resid), size = 0) +
scale_fill_gradient2(mid = "white", high = "red", low = "blue") +
theme_classic()
bay_area_centroids <- st_centroid(st_geometry(spatial_data_no_empty_geo), of_largest_polygon = TRUE)
KNN <- knn2nb(knearneigh(bay_area_centroids, k = 2))
nb_KNN_net <- nb2lines(nb = KNN, coords = bay_area_centroids, as_sf = TRUE)
Wb <- nb2listw(KNN, style = "B")
# length(Wb)
spdep::moran.test(spatial_data_no_empty_geo$lm_resid, Wb, alternative = "two.sided", randomisation = TRUE)
mp <- spdep::moran.plot(spatial_data_no_empty_geo$lm_resid, Wb, plot=FALSE)
ggplot(mp, aes(x = x, y = wx)) +
geom_point() +
geom_smooth(method="lm" , se = FALSE) +
geom_hline(yintercept=mean(mp$wx), lty=2) +
geom_vline(xintercept=mean(mp$x), lty=2) + theme_classic() +
xlab('Residuals') + ylab("Average Residual of Neighbors")+
ggtitle("Correlation of Residuals")
# mod_sar2 <- spautolm(formula = HouseValueE ~ segment + IncomeE + HouseholdSizeE + IncomeGrowth, data = ramsey_data, listw = Wb, family = "SAR")
spdep::moran.test(spatial_data_no_empty_geo$lm_resid, Ww, alternative = "two.sided", randomisation = TRUE)
Ww <- nb2listw(KNN, style = "W")
spdep::moran.test(spatial_data_no_empty_geo$lm_resid, Ww, alternative = "two.sided", randomisation = TRUE)
# length(Wb)
spdep::moran.test(spatial_data_no_empty_geo$lm_resid, Wb, alternative = "two.sided", randomisation = TRUE)
spdep::moran.test(spatial_data_no_empty_geo$lm_resid, Ww, alternative = "two.sided", randomisation = TRUE)
# length(Wb)
spdep::moran.test(spatial_data_no_empty_geo$lm_resid, Wb, alternative = "two.sided", randomisation = TRUE)
KNN <- knn2nb(knearneigh(bay_area_centroids, k = 3)) #Trying
nb_KNN_net <- nb2lines(nb = KNN, coords = bay_area_centroids, as_sf = TRUE)
Wb <- nb2listw(KNN, style = "B")
spdep::moran.test(spatial_data_no_empty_geo$lm_resid, Ww, alternative = "two.sided", randomisation = TRUE)
spdep::moran.test(spatial_data_no_empty_geo$lm_resid, Wb, alternative = "two.sided", randomisation = TRUE)
bay_area_centroids <- st_centroid(st_geometry(spatial_data_no_empty_geo), of_largest_polygon = TRUE)
KNN <- knn2nb(knearneigh(bay_area_centroids, k = 3)) #Trying
nb_KNN_net <- nb2lines(nb = KNN, coords = bay_area_centroids, as_sf = TRUE)
Wb <- nb2listw(KNN, style = "B")
Ww <- nb2listw(KNN, style = "W")
#When trying a Weighted or binary neighborhood structure we find the same values.
spdep::moran.test(spatial_data_no_empty_geo$lm_resid, Ww, alternative = "two.sided", randomisation = TRUE)
spdep::moran.test(spatial_data_no_empty_geo$lm_resid, Wb, alternative = "two.sided", randomisation = TRUE)
#there is significant evidence to reject the null hypothesis that the residuals are independent and identically distributed
mp <- spdep::moran.plot(spatial_data_no_empty_geo$lm_resid, Wb, plot=FALSE)
ggplot(mp, aes(x = x, y = wx)) +
geom_point() +
geom_smooth(method="lm" , se = FALSE) +
geom_hline(yintercept=mean(mp$wx), lty=2) +
geom_vline(xintercept=mean(mp$x), lty=2) + theme_classic() +
xlab('Residuals') + ylab("Average Residual of Neighbors")+
ggtitle("Correlation of Residuals")
# From the linear plot we can also see that there is positive and negative correlation between the residuals and the average residuals of the neighbors. There is areas with positive and negative residuals.
# mod_sar2 <- spautolm(formula = HouseValueE ~ segment + IncomeE + HouseholdSizeE + IncomeGrowth, data = ramsey_data, listw = Wb, family = "SAR")
bay_area_centroids <- st_centroid(st_geometry(spatial_data_no_empty_geo), of_largest_polygon = TRUE)
KNN <- knn2nb(knearneigh(bay_area_centroids, k = 2)) #Trying
nb_KNN_net <- nb2lines(nb = KNN, coords = bay_area_centroids, as_sf = TRUE)
Wb <- nb2listw(KNN, style = "B")
Ww <- nb2listw(KNN, style = "W")
#When trying a Weighted or binary neighborhood structure we find the same values.
spdep::moran.test(spatial_data_no_empty_geo$lm_resid, Ww, alternative = "two.sided", randomisation = TRUE)
spdep::moran.test(spatial_data_no_empty_geo$lm_resid, Wb, alternative = "two.sided", randomisation = TRUE)
#there is significant evidence to reject the null hypothesis that the residuals are independent and identically distributed
mp <- spdep::moran.plot(spatial_data_no_empty_geo$lm_resid, Wb, plot=FALSE)
ggplot(mp, aes(x = x, y = wx)) +
geom_point() +
geom_smooth(method="lm" , se = FALSE) +
geom_hline(yintercept=mean(mp$wx), lty=2) +
geom_vline(xintercept=mean(mp$x), lty=2) + theme_classic() +
xlab('Residuals') + ylab("Average Residual of Neighbors")+
ggtitle("Correlation of Residuals")
# From the linear plot we can also see that there is positive and negative correlation between the residuals and the average residuals of the neighbors. There is areas with positive and negative residuals.
# mod_sar2 <- spautolm(formula = HouseValueE ~ segment + IncomeE + HouseholdSizeE + IncomeGrowth, data = ramsey_data, listw = Wb, family = "SAR")
bay_area_centroids <- st_centroid(st_geometry(spatial_data_no_empty_geo), of_largest_polygon = TRUE)
KNN <- knn2nb(knearneigh(bay_area_centroids, k = 1)) #Trying
nb_KNN_net <- nb2lines(nb = KNN, coords = bay_area_centroids, as_sf = TRUE)
Wb <- nb2listw(KNN, style = "B")
Ww <- nb2listw(KNN, style = "W")
#When trying a Weighted or binary neighborhood structure we find the same values.
spdep::moran.test(spatial_data_no_empty_geo$lm_resid, Ww, alternative = "two.sided", randomisation = TRUE)
spdep::moran.test(spatial_data_no_empty_geo$lm_resid, Wb, alternative = "two.sided", randomisation = TRUE)
#there is significant evidence to reject the null hypothesis that the residuals are independent and identically distributed
mp <- spdep::moran.plot(spatial_data_no_empty_geo$lm_resid, Wb, plot=FALSE)
ggplot(mp, aes(x = x, y = wx)) +
geom_point() +
geom_smooth(method="lm" , se = FALSE) +
geom_hline(yintercept=mean(mp$wx), lty=2) +
geom_vline(xintercept=mean(mp$x), lty=2) + theme_classic() +
xlab('Residuals') + ylab("Average Residual of Neighbors")+
ggtitle("Correlation of Residuals")
# From the linear plot we can also see that there is positive and negative correlation between the residuals and the average residuals of the neighbors. There is areas with positive and negative residuals.
# mod_sar2 <- spautolm(formula = HouseValueE ~ segment + IncomeE + HouseholdSizeE + IncomeGrowth, data = ramsey_data, listw = Wb, family = "SAR")
bay_area_centroids <- st_centroid(st_geometry(spatial_data_no_empty_geo), of_largest_polygon = TRUE)
KNN <- knn2nb(knearneigh(bay_area_centroids, k = 5)) #Trying
nb_KNN_net <- nb2lines(nb = KNN, coords = bay_area_centroids, as_sf = TRUE)
Wb <- nb2listw(KNN, style = "B")
Ww <- nb2listw(KNN, style = "W")
#When trying a Weighted or binary neighborhood structure we find the same values.
spdep::moran.test(spatial_data_no_empty_geo$lm_resid, Ww, alternative = "two.sided", randomisation = TRUE)
spdep::moran.test(spatial_data_no_empty_geo$lm_resid, Wb, alternative = "two.sided", randomisation = TRUE)
#there is significant evidence to reject the null hypothesis that the residuals are independent and identically distributed
mp <- spdep::moran.plot(spatial_data_no_empty_geo$lm_resid, Wb, plot=FALSE)
ggplot(mp, aes(x = x, y = wx)) +
geom_point() +
geom_smooth(method="lm" , se = FALSE) +
geom_hline(yintercept=mean(mp$wx), lty=2) +
geom_vline(xintercept=mean(mp$x), lty=2) + theme_classic() +
xlab('Residuals') + ylab("Average Residual of Neighbors")+
ggtitle("Correlation of Residuals")
# From the linear plot we can also see that there is positive and negative correlation between the residuals and the average residuals of the neighbors. There is areas with positive and negative residuals.
# mod_sar2 <- spautolm(formula = HouseValueE ~ segment + IncomeE + HouseholdSizeE + IncomeGrowth, data = ramsey_data, listw = Wb, family = "SAR")
bay_area_centroids <- st_centroid(st_geometry(spatial_data_no_empty_geo), of_largest_polygon = TRUE)
KNN <- knn2nb(knearneigh(bay_area_centroids, k = 3)) #Trying
nb_KNN_net <- nb2lines(nb = KNN, coords = bay_area_centroids, as_sf = TRUE)
Wb <- nb2listw(KNN, style = "B")
Ww <- nb2listw(KNN, style = "W")
#When trying a Weighted or binary neighborhood structure we find the same values.
spdep::moran.test(spatial_data_no_empty_geo$lm_resid, Ww, alternative = "two.sided", randomisation = TRUE)
spdep::moran.test(spatial_data_no_empty_geo$lm_resid, Wb, alternative = "two.sided", randomisation = TRUE)
#there is significant evidence to reject the null hypothesis that the residuals are independent and identically distributed
mp <- spdep::moran.plot(spatial_data_no_empty_geo$lm_resid, Wb, plot=FALSE)
ggplot(mp, aes(x = x, y = wx)) +
geom_point() +
geom_smooth(method="lm" , se = FALSE) +
geom_hline(yintercept=mean(mp$wx), lty=2) +
geom_vline(xintercept=mean(mp$x), lty=2) + theme_classic() +
xlab('Residuals') + ylab("Average Residual of Neighbors")+
ggtitle("Correlation of Residuals")
# From the linear plot we can also see that there is positive and negative correlation between the residuals and the average residuals of the neighbors. There is areas with positive and negative residuals.
# mod_sar2 <- spautolm(formula = HouseValueE ~ segment + IncomeE + HouseholdSizeE + IncomeGrowth, data = ramsey_data, listw = Wb, family = "SAR")
bay_area_centroids <- st_centroid(st_geometry(spatial_data_no_empty_geo), of_largest_polygon = TRUE)
KNN <- knn2nb(knearneigh(bay_area_centroids, k = 4)) #Trying
nb_KNN_net <- nb2lines(nb = KNN, coords = bay_area_centroids, as_sf = TRUE)
Wb <- nb2listw(KNN, style = "B")
Ww <- nb2listw(KNN, style = "W")
#When trying a Weighted or binary neighborhood structure we find the same values.
spdep::moran.test(spatial_data_no_empty_geo$lm_resid, Ww, alternative = "two.sided", randomisation = TRUE)
spdep::moran.test(spatial_data_no_empty_geo$lm_resid, Wb, alternative = "two.sided", randomisation = TRUE)
#there is significant evidence to reject the null hypothesis that the residuals are independent and identically distributed
mp <- spdep::moran.plot(spatial_data_no_empty_geo$lm_resid, Wb, plot=FALSE)
ggplot(mp, aes(x = x, y = wx)) +
geom_point() +
geom_smooth(method="lm" , se = FALSE) +
geom_hline(yintercept=mean(mp$wx), lty=2) +
geom_vline(xintercept=mean(mp$x), lty=2) + theme_classic() +
xlab('Residuals') + ylab("Average Residual of Neighbors")+
ggtitle("Correlation of Residuals")
# From the linear plot we can also see that there is positive and negative correlation between the residuals and the average residuals of the neighbors. There is areas with positive and negative residuals.
# mod_sar2 <- spautolm(formula = HouseValueE ~ segment + IncomeE + HouseholdSizeE + IncomeGrowth, data = ramsey_data, listw = Wb, family = "SAR")
spatial_data_no_empty_geo%>%
ggplot() +
geom_sf(fill = 'white') +
geom_sf(data = nb_KNN_net, size = .05, color = 'blue')+
theme_classic()
mod_sar2 <- spautolm(formula = HouseValueE ~ segment + IncomeE + HouseholdSizeE, data = ramsey_data, listw = Wb, family = "SAR")
mod_sar2 <- spautolm(formula = HouseValueE ~ segment + IncomeE + HouseholdSizeE, data = spatial_data_no_empty_geo, listw = Wb, family = "SAR")
library(spatialreg)
Ww <- nb2listw(KNN, style = "W")
library(spatialreg)
Ww <- nb2listw(KNN, style = "W")
Wb <- nb2listw(KNN, style = "B")
# Fit SAR Model
mod_sar <- spautolm(formula = HouseValueE ~ segment + IncomeE + HouseholdSizeE, data = ramsey_data, listw = Ww, family = "SAR")
mod_sar <- spautolm(formula = HouseValueE ~ segment + IncomeE + HouseholdSizeE, data = spatial_data_no_empty_geo, listw = Ww, family = "SAR")
Ww <- nb2listw(KNN, style = "W")
# Fit SAR Model
mod_sar <- spautolm(formula = HouseValueE ~ segment + IncomeE + HouseholdSizeE, data = spatial_data_no_empty_geo, listw = Ww, family = "SAR")
library(spatialreg) #install.packages('spatialreg')
Ww <- nb2listw(KNN, style = "W")
# Fit SAR Model
mod_sar <- spautolm(formula = HouseValueE ~ segment + IncomeE + HouseholdSizeE, data = spatial_data_no_empty_geo, listw = Ww, family = "SAR")
Ww <- nb2listw(KNN, style = "W")
mod_sar <- spautolm(formula = HouseValueE ~ segment + IncomeE + HouseholdSizeE, data = spatial_data_no_empty_geo, listw = Ww, family = "SAR")
Ww <- nb2listw(KNN, style = "W")
spdep::moran.test(spatial_data_no_empty_geo$lm_resid, Ww, alternative = "two.sided", randomisation = TRUE)
mod_sar <- spautolm(formula = HouseValueE ~ segment + IncomeE + HouseholdSizeE, data = spatial_data_no_empty_geo, listw = Ww, family = "SAR")
mod_car <- spautolm(formula = HouseValueE ~ segment + IncomeE + HouseholdSizeE, data = spatial_data_no_empty_geo, listw = Ww, family = "CAR")
